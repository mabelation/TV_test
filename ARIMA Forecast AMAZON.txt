library(tseries)
library(astsa)
#install.packages("quantmod")
library(quantmod)
library(tidyverse)
library(forecast)
# Se lee los datos de AMAZON
getSymbols("AMZN", from="2017-07-01", to="2022-06-30")
View(AMZN)
# Del dataframe "series" se crea un vector numérico
series1<-AMZN$AMZN.Adjusted
plot(series1,main= "AMAZON Stock price", col="blue")
# Se convierte el vector en un objeto "ts"  Con esto, hago que esos datos sean de tipo "time series".
#Los principales argumentos de la función ts() son:
#  - data, equivale al vector o matriz de los valores de la serie temporal.
#- start, corresponde a la fecha de la primera observación.
#- end, corresponde a la fecha de la última observación. Se especifica de la misma manera que "start".
#- frequency, equivale al número de observaciones por unidad de tiempo.
#- class, por defecto es "ts" utilizado para una sola serie temporal, si se trabaja con varias series temporales c("mts", "ts", "matrix").
t.series.1<-ts(series1, start = 1, frequency = 1)
t.series.1
# ----------------- Instrucciones Laboratorio -----------------------------
# 1. Obtención y creación de la gráfica de la serie de datos original y una breve explicación 
#    de la gráfica.
# 2. Aplicar la prueba estadística ADF para determinar si la serie raíz unitária y dar 
#    la interpretación de la prueba.
# 3. En caso que se determine que la serie tiene raíz unitaria, aplicar y describir el procedimiento
#    para eliminarla e incudir estacionariedad.
# 4. En caso de haber aplicado el procedimiento anterior realizar la prueba estadística ADF para 
#    determinar si la serie tiene raíz unitária y dar la interpretación de la prueba.
# 5. Obtener la gráfica de la serie con la que se realizará el pronóstico (serie en niveles 
#    o diferenciada).
# 6. Obtener el acf y pacf de la serie para pronóstico y dar una intuición de cada una.
# 7. Buscar un modelo MA(q), AR(p), ARMA(p,q) o ARIMA(p,d,q) que mejor ajuste, considerando
#     la tabla de coeficientes, criterios de información y análisis de residuales.
# 8. Selección del modelo ajustado y su justificación.
# 9. Realizar le pronóstico de la serie para 10 días en adelante.
#------------------------------------------------------------------------------
#1. Obtención y creación de la gráfica de la serie de datos original y una breve explicación 
#   de la gráfica.
plot(t.series.1, main= "AMAZON Stock price", col="blue")
#2. Aplicar la prueba estadística ADF para determinar si la serie raíz unitária y dar 
#    la interpretación de la prueba.
adf.test(t.series.1)
# 3. En caso que se determine que la serie tiene raíz unitaria, aplicar y describir el procedimiento
#    para eliminarla e inducir estacionariedad.
L1.return.series<-diff(t.series.1)
# 4. En caso de haber aplicado el procedimiento anterior realizar la prueba estadística ADF para 
#    determinar si la serie tiene raíz unitária y dar la interpretación de la prueba.
adf.test(L1.return.series)
# 5. Obtener la gráfica de la serie con la que se realizará el pronóstico (serie en niveles 
#    o diferenciada).
plot(L1.return.series)
# 6. Obtener el acf y pacf de la serie para pronóstico y dar una intuición de cada una.
acf2(L1.return.series, max.lag = 20)
# 7. Buscar un modelo MA(q), AR(p), ARMA(p,q) o ARIMA(p,d,q) que mejor ajuste, considerando
#    la tabla de coeficientes, criterios de información y análisis de residuales.
ARIMA.AIC <- matrix(0,1,8)
# Como se mencionó en la sección ARIMA, el modelo ARIMA se puede ajustar utilizando la serie 
# original especificando en el modelo el orden de diferenciación "1" o se puede ajustar como 
# un modelo ARMA utilizando la serie de diferencias.

#Probar autoarima
AMZNModel<-auto.arima(L1.return.series,ic="aic",trace=TRUE)

#1
#AR(p) autoregresivo , I (Orden de diferenciacion), MA (q) promedio movil
ARIMA.0.1.1 <- sarima(t.series.1, p=0, d=1, q=1)
ARIMA.0.1.1$ttable
ARIMA.AIC[1]<-ARIMA.0.1.1$AIC
#2
ARIMA.1.1.0 <- sarima(t.series.1, p=1, d=1, q=0)
ARIMA.1.1.0$ttable
ARIMA.AIC[2]<-ARIMA.1.1.0$AIC
#3
ARIMA.1.1.1 <- sarima(t.series.1, p=1, d=1, q=1)
ARIMA.1.1.1$ttable
ARIMA.AIC[3]<-ARIMA.1.1.1$AIC
#4
ARIMA.1.1.2 <- sarima(t.series.1, p=1, d=1, q=2)
ARIMA.1.1.2$ttable
ARIMA.AIC[4]<-ARIMA.1.1.2$AIC
#5
ARIMA.2.1.1 <- sarima(t.series.1, p=2, d=1, q=1)
ARIMA.2.1.1$ttable
ARIMA.AIC[5]<-ARIMA.2.1.1$AIC
#6
ARIMA.2.1.2 <- sarima(t.series.1, p=2, d=1, q=2)
ARIMA.2.1.2$ttable
ARIMA.AIC[6]<-ARIMA.2.1.2$AIC
#7 CANDIDATO 
ARIMA.2.1.3 <- sarima(t.series.1, p=2, d=1, q=3)
ARIMA.2.1.3$ttable
ARIMA.AIC[7]<-ARIMA.2.1.3$AIC
#8 CANDIDATO
ARIMA.3.1.2 <- sarima(t.series.1, p=3, d=1, q=2)
ARIMA.3.1.2$ttable
ARIMA.AIC[8]<-ARIMA.3.1.2$AIC
# 8. Selección del modelo ajustado y su justificación.
ARIMA.AIC
ARIMA.2.1.3 <- sarima(t.series.1, p=2, d=1, q=2)
ARIMA.2.1.3$ttable
# 9. Realizar le pronóstico de la serie para 20 días en adelante.
series.forecast<- sarima.for(t.series.1, n.ahead = 20,2,1,2)
series.forecast$pred

